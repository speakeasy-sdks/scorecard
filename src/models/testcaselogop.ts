/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { HTTPValidationError, HTTPValidationError$ } from "./httpvalidationerror";
import * as z from "zod";

export type TestcaseLogResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Validation Error
     */
    httpValidationError?: HTTPValidationError | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    any?: any | undefined;
};

/** @internal */
export namespace TestcaseLogResponse$ {
    export type Inbound = {
        ContentType: string;
        HTTPValidationError?: HTTPValidationError$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
        any?: any | undefined;
    };

    export const inboundSchema: z.ZodType<TestcaseLogResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            HTTPValidationError: HTTPValidationError$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            any: z.any().optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.HTTPValidationError === undefined
                    ? null
                    : { httpValidationError: v.HTTPValidationError }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.any === undefined ? null : { any: v.any }),
            };
        });

    export type Outbound = {
        ContentType: string;
        HTTPValidationError?: HTTPValidationError$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
        any?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TestcaseLogResponse> = z
        .object({
            contentType: z.string(),
            httpValidationError: HTTPValidationError$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            any: z.any().optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.httpValidationError === undefined
                    ? null
                    : { HTTPValidationError: v.httpValidationError }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.any === undefined ? null : { any: v.any }),
            };
        });
}
