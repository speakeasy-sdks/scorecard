/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ValidationError, ValidationError$ } from "./validationerror";
import * as z from "zod";

export type HTTPValidationError = {
    detail?: Array<ValidationError> | undefined;
};

/** @internal */
export namespace HTTPValidationError$ {
    export type Inbound = {
        detail?: Array<ValidationError$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<HTTPValidationError, z.ZodTypeDef, Inbound> = z
        .object({
            detail: z.array(ValidationError$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.detail === undefined ? null : { detail: v.detail }),
            };
        });

    export type Outbound = {
        detail?: Array<ValidationError$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, HTTPValidationError> = z
        .object({
            detail: z.array(ValidationError$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.detail === undefined ? null : { detail: v.detail }),
            };
        });
}
