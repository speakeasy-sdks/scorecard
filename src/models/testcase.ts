/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Testcase = {
    fullPrompt?: string | undefined;
    ideal?: string | undefined;
    modelResponse?: string | undefined;
    retrievalContext?: string | undefined;
    testsetId: number;
    userQuery: string;
};

/** @internal */
export namespace Testcase$ {
    export type Inbound = {
        full_prompt?: string | undefined;
        ideal?: string | undefined;
        model_response?: string | undefined;
        retrieval_context?: string | undefined;
        testset_id: number;
        user_query: string;
    };

    export const inboundSchema: z.ZodType<Testcase, z.ZodTypeDef, Inbound> = z
        .object({
            full_prompt: z.string().optional(),
            ideal: z.string().optional(),
            model_response: z.string().optional(),
            retrieval_context: z.string().optional(),
            testset_id: z.number().int(),
            user_query: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.full_prompt === undefined ? null : { fullPrompt: v.full_prompt }),
                ...(v.ideal === undefined ? null : { ideal: v.ideal }),
                ...(v.model_response === undefined ? null : { modelResponse: v.model_response }),
                ...(v.retrieval_context === undefined
                    ? null
                    : { retrievalContext: v.retrieval_context }),
                testsetId: v.testset_id,
                userQuery: v.user_query,
            };
        });

    export type Outbound = {
        full_prompt?: string | undefined;
        ideal?: string | undefined;
        model_response?: string | undefined;
        retrieval_context?: string | undefined;
        testset_id: number;
        user_query: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Testcase> = z
        .object({
            fullPrompt: z.string().optional(),
            ideal: z.string().optional(),
            modelResponse: z.string().optional(),
            retrievalContext: z.string().optional(),
            testsetId: z.number().int(),
            userQuery: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.fullPrompt === undefined ? null : { full_prompt: v.fullPrompt }),
                ...(v.ideal === undefined ? null : { ideal: v.ideal }),
                ...(v.modelResponse === undefined ? null : { model_response: v.modelResponse }),
                ...(v.retrievalContext === undefined
                    ? null
                    : { retrieval_context: v.retrievalContext }),
                testset_id: v.testsetId,
                user_query: v.userQuery,
            };
        });
}
